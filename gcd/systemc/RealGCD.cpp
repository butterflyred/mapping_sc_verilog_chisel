//////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////
//                                                          //
// This SystemC file has been generated by the verilog2sc    //
// tool.                                                    //
// Contact help@edautils.com  for support/info.//
//                                                          //
//                                                          //
//////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////
//
//
//
// Generated by : apache on 1/19/21 2:55 PM
//
//
#include "systemc.h" 
#include "RealGCD.h" 

void RealGCD::assign_stmt_at_line_17_1506083063()
{
    while( true )
    {
        wait();
        allow_enter = (sc_logic)( ( ( sc_logic)( io_in_valid.read() ) ).to_bool() & ( ( sc_logic)( ( 0 == busy.read() ? 1 : 0 ) ) ).to_bool() );
    }
}
void RealGCD::assign_stmt_at_line_18_829217329()
{
    while( true )
    {
        wait();
        gt = (sc_logic)( ( a.read() ).to_uint() > ( b.read() ).to_uint() );
    }
}
void RealGCD::assign_stmt_at_line_19_1343293809()
{
    while( true )
    {
        wait();
        sub = (sc_lv< 16 >)( ( b.read() ).to_uint() - ( a.read() ).to_uint() );
    }
}
void RealGCD::assign_stmt_at_line_20_399683701()
{
    while( true )
    {
        wait();
        io_in_ready = (sc_logic)( ( 0 == busy.read() ? 1 : 0 ) );
    }
}
void RealGCD::assign_stmt_at_line_21_1717688512()
{
    while( true )
    {
        wait();
        io_out_valid = (sc_logic)( ( ( sc_logic)( ( b.read() ).to_uint() == ( ( sc_lv< 16 > )( 0 ) ).to_uint() ) ).to_bool() & ( ( sc_logic)( busy.read() ) ).to_bool() );
    }
}
void RealGCD::assign_stmt_at_line_22_822815599()
{
    while( true )
    {
        wait();
        io_out_bits = (sc_lv< 16 >)( a.read() );
    }
}
void RealGCD::always_stmt_at_line_24_1762260670()
{
    while( true )
    {
        wait();
        if ( ( ( sc_logic ) ( reset.read() ) ).to_bool() ) 
        {
            a = (sc_lv< 16 >)( 0 );
        }
        else
        {
            if ( ( ( sc_logic ) ( io_out_valid.read() ) ).to_bool() ) 
            {
                a = (sc_lv< 16 >)( 0 );
            }
            else
            {
                if ( ( ( sc_logic ) ( busy.read() ) ).to_bool() ) 
                {
                    if ( ( ( sc_logic ) ( gt.read() ) ).to_bool() ) 
                    {
                        a = (sc_lv< 16 >)( b.read() );
                    }
                    else
                    {
                        if ( ( ( sc_logic ) ( allow_enter.read() ) ).to_bool() ) 
                        {
                            a = (sc_lv< 16 >)( io_in_bits_a.read() );
                        }
                    }
                }
                else
                {
                    if ( ( ( sc_logic ) ( allow_enter.read() ) ).to_bool() ) 
                    {
                        a = (sc_lv< 16 >)( io_in_bits_a.read() );
                    }
                }
            }
        }
        if ( ( ( sc_logic ) ( reset.read() ) ).to_bool() ) 
        {
            b = (sc_lv< 16 >)( 0 );
        }
        else
        {
            if ( ( ( sc_logic ) ( io_out_valid.read() ) ).to_bool() ) 
            {
                b = (sc_lv< 16 >)( 0 );
            }
            else
            {
                if ( ( ( sc_logic ) ( busy.read() ) ).to_bool() ) 
                {
                    if ( ( ( sc_logic ) ( gt.read() ) ).to_bool() ) 
                    {
                        b = (sc_lv< 16 >)( a.read() );
                    }
                    else
                    {
                        b = (sc_lv< 16 >)( sub.read() );
                    }
                }
                else
                {
                    if ( ( ( sc_logic ) ( allow_enter.read() ) ).to_bool() ) 
                    {
                        b = (sc_lv< 16 >)( io_in_bits_b.read() );
                    }
                }
            }
        }
        if ( ( ( sc_logic ) ( reset.read() ) ).to_bool() ) 
        {
            busy = (sc_logic)( 0 );
        }
        else
        {
            if ( ( ( sc_logic ) ( io_out_valid.read() ) ).to_bool() ) 
            {
                busy = (sc_logic)( 0 );
            }
            else
            {
                if ( ( ( sc_logic ) ( allow_enter.read() ) ).to_bool() ) 
                {
                    busy = (sc_logic)( 1 );
                }
            }
        }
    }
}
